<?php

namespace App\Controllers;

use App\Controllers\BaseController;
use CodeIgniter\HTTP\ResponseInterface;

class TestRegularExpressionsController extends BaseController
{
	/**
	* Looking for a coincidence with the template in the line.
	*/
	public function testPregMatch()
	{
		$pattern = "/\d+/";
		$text = "–∫–∞–∫–æ–π —Ç–æ –ø—Ä–∏–º–µ—Ä - –∏–∑ –ø—è—Ç–∏ —è–±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏—á–µ–≥–æ";
		
		if (preg_match($pattern, $text, $matches)) {
			$message = "–Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ " . $matches[0];
		    return $this->response->setJSON($message);
		}

		return $this->response->setJSON("nothing a special"); 

	}

	public function testPregMatchAll()
	{
		$pattern = "/\w+/";
		$text = "PHP A WERY cool";
		preg_match_all($pattern, $text, $matches);
		return $this->response->setJSON($matches[0]);
	}

	public function testResponseMessage()
	{
		$body = "message you can see right now!!";
		// return $this->response->setStatusCode(200)->setBody($body);
		// return $this->response->setStatusCode(404, $body); // —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç 200 your message
		// return $this->response->setJSON($body);
		// return $this->response->setStatusCode(200)->setJSON($body);
		// return $this->response->setXML($body);

		// return redirect()->to('/');

		// $name = 'text.txt';
		// return $this->response->download($name, $body)->inline();

		// $response = $this->response->setStatusCode(201);
		// $message = $response->getStatusCode();
		// return $this->response->setXML($message);
	}

    /**
	* Replaces the coincidences found.
	*/
	public function testPregReplace()
	{
		$pattern = "/\s+/";
		$replacement = "-";
		$text = "hello world";
		$result = preg_replace($pattern, $replacement, $text);
		return $this->response->setJSON($result);
	}

	/**
	* It breaks the line according to regular expression.
	*/
	public function testPregSplit()
	{
		$pattern = "/[\s,]+/";
		$text = "–ú–∞—à–∏–Ω–∞, –µ—Ö–∞–ª–∞_–≤ —Å—Ç–æ—Ä–æ–Ω—É, –û—É–π—à–µ–Ω–ë–∏—á";
		$fruits = preg_split($pattern, $text);
		return $this->response->setJSON($fruits);
	}

	public function testPregReplaceCallback()
	{
		$text = "–¶–µ–Ω—ã: 100, 200, 300";
		$result = preg_replace_callback('/\d+/', function($match) {
			return $match[0] * 2;
		}, $text);

		return $this->response->setJSON($result);
	}


	 // –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã (—Ä–µ–≥—É–ª—è—Ä–∫–∏)
	 // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ	 –®–∞–±–ª–æ–Ω	 –ü—Ä–∏–º–µ—Ä
	 // –ß–∏—Å–ª–∞ 	 /\d+/	123
	 // –ë—É–∫–≤—ã  –ª–∞—Ç–∏–Ω–∏—Ü—ã	/[a-zA-Z]+/	abcXYZ
	 // Email	 /^[\w.-]+@\w+\.\w+$/	test@example.com
	 // –¢–µ–ª–µ—Ñ–æ–Ω  (–ø—Ä–æ—Å—Ç–æ–π)	/^\+?\d{10,15}$/	+79991234567
	 // HTML-—Ç–µ–≥–∏	 /<[^>]+>/	<p>—Ç–µ–∫—Å—Ç</p>


	// üß™ –§–ª–∞–≥–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
	// –§–ª–∞–≥–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Å–ª—ç—à–∞: '/pattern/i'
	// –§–ª–∞–≥	–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
	// i	–ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
	// u	–Æ–Ω–∏–∫–æ–¥-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
	// s	. –≤–∫–ª—é—á–∞–µ—Ç \n
	// m	–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
}